name: Build and deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  STACK_NAME: prod-hexxy-media
  S3_BUCKET: prod-objectobject-ca-codedeploy-artifacts
  CDK_IAM_ROLE_ARN: arn:aws:iam::511603859520:role/prod-objectobject-ca-GitHubActionsCDKRole19D97701-sweSB0Sp33WN
  AZURE_LOCATION: eastus2

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: pip
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      
      - name: Install Python packages
        run: pip install .[build] hatch

      - name: Install Node.js packages
        run: npm ci
      
      - name: Build wheel
        run: hatch build --target wheel

      - name: Build static site
        run: python -m hexxy_media.web.app build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist

      - name: Upload static site artifact
        uses: actions/upload-artifact@v4
        with:
          name: static-site
          path: _site

  deploy-cdktf:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: prod-cdktf
    permissions:
      id-token: write
      contents: read
      issues: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Python packages
        run: pip install .[cdktf]

      - name: Run Terraform CDK
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        uses: hashicorp/terraform-cdk-action@v0.1
        with:
          mode: auto-approve-apply
          stackName: prod
          terraformCloudToken: ${{ secrets.TF_API_TOKEN }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}

  deploy-aws-cdk:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: prod-aws-cdk
    permissions:
      id-token: write
      contents: read
    outputs:
      application-name: ${{ steps.cdk-outputs.outputs.application-name }}
      deployment-group-name: ${{ steps.cdk-outputs.outputs.deployment-group-name }}
      iam-role-arn: ${{ steps.cdk-outputs.outputs.iam-role-arn }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.CDK_IAM_ROLE_ARN }}

      - name: Install CDK CLI
        run: npm install -g aws-cdk

      - name: Install Python packages
        run: pip install .[aws-cdk]
      
      - name: Deploy CDK stack
        run: cdk deploy prod --ci --require-approval never --outputs-file outputs.json

      - name: Parse CDK outputs file
        id: cdk-outputs
        run: |
          outputs_json="$(cat outputs.json | jq '.["${{ env.STACK_NAME }}"]')"
          echo "application-name=$(echo "$outputs_json" | jq '.ApplicationName' --raw-output)" >> "$GITHUB_OUTPUT"
          echo "deployment-group-name=$(echo "$outputs_json" | jq '.DeploymentGroupName' --raw-output)" >> "$GITHUB_OUTPUT"
          echo "iam-role-arn=$(echo "$outputs_json" | jq '.GitHubActionsRoleARN' --raw-output)" >> "$GITHUB_OUTPUT"

  deploy-codedeploy:
    needs: deploy-aws-cdk
    runs-on: ubuntu-latest
    environment:
      name: prod-codedeploy
      url: ${{ steps.create-deployment.outputs.url }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ needs.deploy-aws-cdk.outputs.iam-role-arn }}

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: codedeploy/dist

      - name: Download static site artifact
        uses: actions/download-artifact@v4
        with:
          name: static-site
          path: codedeploy/html

      - name: Set environment variables
        run: |
          cat <<EOF > codedeploy/.env
          DB_HOST=localhost
          DB_PORT=5432
          DB_USER=hexxy_media
          DB_PASS=${{ secrets.DB_PASS }}
          DB_NAME=hexxy_media
          EOF

      - name: Upload deployment bundle to S3
        id: upload-bundle
        run: |
          S3_KEY="${{ env.STACK_NAME }}/${{ github.sha }}.zip"
          echo "s3-key=$S3_KEY" >> "$GITHUB_OUTPUT"
          aws deploy push \
            --application-name ${{ needs.deploy-aws-cdk.outputs.application-name }} \
            --s3-location s3://${{ env.S3_BUCKET }}/$S3_KEY \
            --source codedeploy

      - name: Create CodeDeploy deployment
        id: create-deployment
        run: |
          response="$(aws deploy create-deployment \
            --application-name ${{ needs.deploy-aws-cdk.outputs.application-name }} \
            --deployment-group-name ${{ needs.deploy-aws-cdk.outputs.deployment-group-name }} \
            --s3-location "bucket=${{ env.S3_BUCKET }},key=${{ steps.upload-bundle.outputs.s3-key }},bundleType=zip")"
          
          deployment_id="$(echo "$response" | jq '.deploymentId' --raw-output)"
          url="https://${{ env.AWS_REGION }}.console.aws.amazon.com/codesuite/codedeploy/deployments/${deployment_id}?region=${{ env.AWS_REGION }}"
          echo "Deployment URL: $url"

          echo "deployment-id=$deployment_id" >> "$GITHUB_OUTPUT"
          echo "url=$url" >> "$GITHUB_OUTPUT"

      - name: Wait for deployment to finish
        run: aws deploy wait deployment-successful --deployment-id ${{ steps.create-deployment.outputs.deployment-id }}

  deploy-azure:
    runs-on: ubuntu-latest
    environment: prod-azure
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure
        id: deploy
        uses: azure/bicep-deploy@v2
        with:
          type: deployment
          operation: create
          scope: subscription
          name: hexxy-media-bicep-deploy
          location: ${{ env.AZURE_LOCATION }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          parameters-file: ./src/azure/main.bicepparam

      - name: Log outputs
        env:
          IDENTITIES: ${{ steps.deploy.outputs.identities }}
        run: |
          echo 'Tenant ID: `${{ vars.AZURE_TENANT_ID }}`' >> $GITHUB_STEP_SUMMARY
          echo 'Subscription ID: `${{ vars.AZURE_SUBSCRIPTION_ID }}`' >> $GITHUB_STEP_SUMMARY
          echo "$IDENTITIES" | jq --raw-output '
            (
              ["Repository", "Client ID"]
              | ., map("---")
            ),
            (
              sort_by(.name)
              | .[]
              | [
                "[\(.name)](https://github.com/\(.name))",
                "`\(.clientId)`"
              ]
            )
            | join(" | ")
            | "| \(.) |"
          ' >> $GITHUB_STEP_SUMMARY
